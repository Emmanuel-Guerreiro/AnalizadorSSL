COBOL-SOURCE-PROGRAM ::= ['ENVIROMENT' 'DIVISION' '.' 
ENVIROMENT-DIVISION-CONTENT]['DATA' 'DIVISION' '.' 
DATA-DIVISION-CONTENT]

ENVIROMENT-DIVISION-CONTENT ::= [CONFIGURATION-SECTION][INPUT-OUTPUT-SECTION]

CONFIGURATION-SECTION ::= 'CONFIGURATION' 'SECTION' '.'
CONFIGURATION-SECTION-PARAGRAPHS


/*Reglas agregadas por mi para poder completar mejor el analisis*/
INPUT-OUTPUT-SECTION ::= ['FILE' 'CONTROL' '.' file-control-entry]

CONFIGURATION-SECTION-PARAGRAPHS ::= ['SOURCE' 'COMPUTER' '.' source-computer-entry]
['OBJECT' 'COMPUTER' '.' object-computer-entry]

SOURCE-COMPUTER-ENTRY ::= ID_COMPUTER DOT
OBJECT COMPUTER ENTRY ::= ID_COMPUTER DOT

DATA-DIVISION-CONTENT ::= ['FILE' 'SECTION' '.' FILE-DESCRIPTION-ENTRY]//VER SI LO HAGO MAS COMPLEJO

FILE-DESCRIPTION-ENTRY ::= 'FILE' 'SECTION' '.' 'NL' 'FD' 'ID_FILE' NL '01' record-name
NL WORKING-STORAGE-SECTION /*No se si lo voy a hacer tan completo*/


//terminales:
// 'ENVIROMENT', 'DIVISION', '.', 'DATA'
// 'SECTION' 'CONFIGURATION', 'FILE', 'CONTROL'

//no terminales
//cobol-source-program, enviroment
//configuration-section, input-output-section,
//configuration-section-paragraphs
//enviroment-division-content

//Cuales tokenizo a partir de cadenas arbitrarias:
//(Para que sea mas completo el analisis)
//source-computer-entry => {palabra} = ID_COMPUTER //Ver como hago una mejor regex para el id
//object-computer-entry =>  {palabra} = ID_COMPUTER //Ver como hago una mejor regex para el id
/*Para este seguro tenga que generar otra regex que arme onda un ID_FILE


//Reglas ya completas en su estructuracion:
* CONFIGURATION-SECTION-PARAGRAPHS
* CONFIGURATION-SECTION
* INPUT-OUTPUT-SECTION
* ENVIROMENT-DIVISION-CONTENT
* DATA-DIVISION-CONTENT 
* COBOL-SOURCE-PROGRAM
* OBJECT COMPUTER ENTRY



//Documentacion en la que base todo:
https://www.microfocus.com/documentation/object-cobol/oc41books/lrcpro.htm
https://www.ibm.com/docs/en/i/7.4?topic=object-designing-your-ile-cobol-source-program


/*
Posibles lugares de conflicto en FLEX:
La regex de cadenap (el punto principalmente)*/



cadenap ({palabras}\.{palabras})

/*Relaciono a una cadena de la forma [] con el ID_COMPUTER
                            a traves del union en el archivo de Bison*/
                            /*Relaciono texto de la forma "[].[]" con el ID_FILE*/



//BOrre reglas por errores:

cobol-source-program: | ENVIROMENT DIVISION DOT enviroment-division-content DATA DIVISION DOT data-division-content  

enviroment-diovision-content| configuration-section input-output-section 


//Estos que incluyen error los borro para ver si son causa de no compilar
data-division-content: | error SECTION DOT FILEDESC {printf("\n--> Error lexico en linea %d, Se esperaban <<>>, luego de primer expression\n",++nlines);} 
                     | FILEM  error DOT FILEDESC {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);} 
                     | FILEM  SECTION error FILEDESC {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);} 
                     | FILEM  SECTION DOT error {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);} 


input-output-section: | error CONTROL DOT ID_FILE {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);}
                    | FILEM  error DOT ID_FILE {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);}
                    | FILEM  CONTROL error ID_FILE {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);}
                    | FILEM  CONTROL DOT error {printf("\n--> Error lexico en linea %d, Se esperaban <<>> luego de primer expression\n",++nlines);}